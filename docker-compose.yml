services:

  postgres:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - user_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - cloud_network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - files_storage:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - cloud_network
    restart: unless-stopped

  redis:
    container_name: redis_cache
    image: redis:alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cloud_network
    restart: unless-stopped

  app:
    build: .
    container_name: backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: redis_cache
      MINIO_URL: http://minio:9000
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - minio
      - redis
    networks:
      - cloud_network
    restart: unless-stopped

volumes:
  user_data:
  files_storage:
  redis_data:

networks:
  cloud_network:
    driver: bridge
